20230327_Bigdata

* 판다스

 - 판다스 Dataframe
  : 데이터프레임 출력 시 크기를 제공 (rows*columns)
  : header=None 옵션 추가 시(헤더를 포함하는 경우는 생략)
   헤더가 없는 경우 None을 적용해 데이터를 헤더로 인식하는 것을 방지
   가로 첫번째줄 = column header
   세로 첫번째줄 = index
  : Dataframe = Series의 집합을 의미


 - Series
  : 인덱스 + column 한 줄을 의미
  : Series 출력 시 데이터 타입(dtype)을 뿌려준다
  : 판다스는 파이썬 배열을 넘파이 ndarray로 변환하여 적용
  : 다른 형태(자료형)의 데이터가 들어갈 수는 있음
    But, 데이터 타입(dtype)이 object로 표시된다
  : index - Series의 property로 인덱스 지정 등 활용 가능
  : name - Series의 이름을 바꿀 수 있음
  : 인덱싱, 인덱스 슬라이싱 가능하며 결과를 Series로 반환
  : ndarray로 변경할 때 유리한 적용 방법
    -> method 방식 : .to_numpy()
  : 판다스에서는 append 사용을 지양하는 추세
  : concat 적용 시 인덱스를 새로 적용할 때 옵션 추가
    -> ignore_index=True
    인덱스가 중복되는 것을 방지하기 위함!
  : NaN(Not a Number) 대응방안
   판다스의 경우 비어있는 값을 NaN으로 대체
   NaN을 통해 결측치가 있는지 확인
   -> .isna()  메서드 활용 비어 있는 값 확인
   -> .dropna() 메서드 활용 비어 있는 값 삭제 처리
   -> .replace(np.NaN, 변경할 값) 메서드 활용 변경 처리
       (NaN 뿐만 아니라 특정 값을 찾을 때 활용)
   -> .fillna(변경할 값) 메서드 활용 변경 처리
       (NaN을 자동적으로 찾아 값을 변경)


 - Dataframe
  : .index 프로퍼티 - 세로 인덱스 확인 (row)
  : .columns 프로퍼티 - 가로 인덱스 확인 (column)
   * 수정할 때 개수가 맞아야 한다!
  : 데이터프레임은 for문 적용 시 columns 인덱스로 적용됨
  : 인덱스 슬라이싱 적용 가능!
    But, column의 범위를 적용할 수 없다!
    row의 범위는 적용할 수 있다!
     * 하나의 값을 줄 때는 반드시 column의 범위를 지정해야함
     * 범위 값을 줄 때에는 반드시 row의 범위를 지정해야함

   * 문자열 레이블 사용
    -> .loc[row범위, column 1개 지정(문자열)]을 통해 값 출력

   * 무조건 숫자 인덱스로 받아온다(column도 범위 지정 가능!)    
    -> .iloc[row범위, column 1개 지정(숫자!)]을 통해 값 출력


* Series : dtype
* Dataframe : dtypes


